#LCM
#HERE WE HAVE T0 FIND THE LEAST COMMON FACTOR
#LCM CAN ALSO BE DETERMINED USNG GCD
#I.E   'LCM(X,Y)=(X*Y)/GCD(X,Y)
#LCM CODE USING RECURSION

def find_lcm(a,b,t=2):
    while True:
        if a<t or b<t:
            return a*b
        if a%t==0 and b%t==0:
           
            return t*find_lcm(a//t,b//t,t)
        else:
            return find_lcm(a,b,t+1)
    return a*b
a,b=map(int,input().split())
print(find_lcm(a,b))


#GCD CODE USING RECURSION

def find_gcd(a,b):
    if b==0:
        return a
    if a==0:
        return b
    if a>b:
        a,b=b,a
    
    return find_gcd(a,b%a)

a,b=map(int,input().split())
print(find_gcd(a,b))
    

#EULIDS ALGORTHIM --- ACCORDING TO THIS ALGORITHM GCD(X,Y)=GCD(X-Y,Y)=GCD(X,Y-X)
#ALTERNATIVELY IT CAN ALSO BE WRITTEN AS GCD(X,Y)=GCD(X,Y%X)  IF X<Y
#                                   ---- GCD(X,Y)=GCD(X%Y,Y)  IF X>Y



def find_gcd(x,y):
    if x==0:
        return y
    if y==0:
        return x
    if x>y:
        x,y=y,x
    return find_gcd(x,y%x)

n=int(input())
a=[int(j) for j in input().split()]
res=find_gcd(a[0],a[1])
#print(res)
i=2
while i<n:
    res=find_gcd(a[i],res)
    #print(res)
    i+=1
print(res)



def find_gcd(x,y):
    if x==0:
        return y
    if y==0:
        return x
    if x>y:
        x,y=y,x
    return find_gcd(x,y%x)


a,b,x,y=map(int,input().split())
if b>=x:
    print("false")
else:
    if find_gcd(a,b)==find_gcd(x,y):
        print("true")
    else:
        print("false")
